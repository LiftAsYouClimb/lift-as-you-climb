"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserInfoToJSON = exports.UserInfoFromJSONTyped = exports.UserInfoFromJSON = exports.instanceOfUserInfo = void 0;
const runtime_1 = require("../runtime");
const UserEventInfo_1 = require("./UserEventInfo");
const WebAuthnDevices_1 = require("./WebAuthnDevices");
const WebAuthnType_1 = require("./WebAuthnType");
/**
 * Check if a given object implements the UserInfo interface.
 */
function instanceOfUserInfo(value) {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "email_verified" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "last_login_at" in value;
    isInstance = isInstance && "login_count" in value;
    isInstance = isInstance && "phone" in value;
    isInstance = isInstance && "phone_verified" in value;
    isInstance = isInstance && "recent_events" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "user_metadata" in value;
    isInstance = isInstance && "webauthn" in value;
    isInstance = isInstance && "webauthn_devices" in value;
    return isInstance;
}
exports.instanceOfUserInfo = instanceOfUserInfo;
function UserInfoFromJSON(json) {
    return UserInfoFromJSONTyped(json, false);
}
exports.UserInfoFromJSON = UserInfoFromJSON;
function UserInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'created_at': (new Date(json['created_at'])),
        'email': json['email'],
        'email_verified': json['email_verified'],
        'id': json['id'],
        'last_login_at': (new Date(json['last_login_at'])),
        'login_count': json['login_count'],
        'phone': json['phone'],
        'phone_verified': json['phone_verified'],
        'recent_events': (json['recent_events'].map(UserEventInfo_1.UserEventInfoFromJSON)),
        'status': json['status'],
        'updated_at': (new Date(json['updated_at'])),
        'user_metadata': json['user_metadata'],
        'webauthn': json['webauthn'],
        'webauthn_devices': (json['webauthn_devices'].map(WebAuthnDevices_1.WebAuthnDevicesFromJSON)),
        'webauthn_types': !(0, runtime_1.exists)(json, 'webauthn_types') ? undefined : (json['webauthn_types'].map(WebAuthnType_1.WebAuthnTypeFromJSON)),
    };
}
exports.UserInfoFromJSONTyped = UserInfoFromJSONTyped;
function UserInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'created_at': (value.created_at.toISOString()),
        'email': value.email,
        'email_verified': value.email_verified,
        'id': value.id,
        'last_login_at': (value.last_login_at.toISOString()),
        'login_count': value.login_count,
        'phone': value.phone,
        'phone_verified': value.phone_verified,
        'recent_events': (value.recent_events.map(UserEventInfo_1.UserEventInfoToJSON)),
        'status': value.status,
        'updated_at': (value.updated_at.toISOString()),
        'user_metadata': value.user_metadata,
        'webauthn': value.webauthn,
        'webauthn_devices': (value.webauthn_devices.map(WebAuthnDevices_1.WebAuthnDevicesToJSON)),
        'webauthn_types': value.webauthn_types === undefined ? undefined : (value.webauthn_types.map(WebAuthnType_1.WebAuthnTypeToJSON)),
    };
}
exports.UserInfoToJSON = UserInfoToJSON;
