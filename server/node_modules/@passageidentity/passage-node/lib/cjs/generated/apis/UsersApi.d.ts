/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateUserRequest, UpdateUserRequest, UserResponse } from '../models/index';
export interface ActivateUserRequest {
    appId: string;
    userId: string;
}
export interface CreateUserOperationRequest {
    appId: string;
    createUserRequest: CreateUserRequest;
}
export interface DeactivateUserRequest {
    appId: string;
    userId: string;
}
export interface DeleteUserRequest {
    appId: string;
    userId: string;
}
export interface GetUserRequest {
    appId: string;
    userId: string;
}
export interface UpdateUserOperationRequest {
    appId: string;
    userId: string;
    updateUserRequest: UpdateUserRequest;
}
/**
 *
 */
export declare class UsersApi extends runtime.BaseAPI {
    /**
     * Activate a user. They will now be able to login.
     * Activate User
     */
    activateUserRaw(requestParameters: ActivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;
    /**
     * Activate a user. They will now be able to login.
     * Activate User
     */
    activateUser(requestParameters: ActivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;
    /**
     * Create user for an application. Must provide an email of phone number identifier.
     * Create User
     */
    createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;
    /**
     * Create user for an application. Must provide an email of phone number identifier.
     * Create User
     */
    createUser(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;
    /**
     * Deactivate a user. Their account will still exist, but they will not be able to login.
     * Deactivate User
     */
    deactivateUserRaw(requestParameters: DeactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;
    /**
     * Deactivate a user. Their account will still exist, but they will not be able to login.
     * Deactivate User
     */
    deactivateUser(requestParameters: DeactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;
    /**
     * Delete a user.
     * Delete User
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a user.
     * Delete User
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get information about a user.
     * Get User
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;
    /**
     * Get information about a user.
     * Get User
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;
    /**
     * Update a user\'s information.
     * Update User
     */
    updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;
    /**
     * Update a user\'s information.
     * Update User
     */
    updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;
}
