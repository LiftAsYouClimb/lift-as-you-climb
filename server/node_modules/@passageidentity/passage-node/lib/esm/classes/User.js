var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _User_appID, _User_apiKey, _User_client, _User_configuration;
import { PassageError } from './PassageError';
import apiConfiguration from '../utils/apiConfiguration';
import { TokensApi, UsersApi, UserDevicesApi, } from '../generated';
/***/
export default class User {
    /**
     * Initialize a new Passage User instance.
     *
     * @param {PassageConfig} config The default config for Passage and User initialization
     */
    constructor(config) {
        _User_appID.set(this, void 0);
        _User_apiKey.set(this, void 0);
        _User_client.set(this, void 0);
        _User_configuration.set(this, void 0);
        __classPrivateFieldSet(this, _User_appID, config.appID ? config.appID : '', "f");
        __classPrivateFieldSet(this, _User_apiKey, config.apiKey ? config.apiKey : '', "f");
        this.id = '';
        __classPrivateFieldSet(this, _User_configuration, apiConfiguration({
            accessToken: __classPrivateFieldGet(this, _User_apiKey, "f"),
        }), "f");
        __classPrivateFieldSet(this, _User_client, new UsersApi(__classPrivateFieldGet(this, _User_configuration, "f")), "f");
    }
    /**
     * Check if API key exists for this Passage instance
     * @throws {PassageError} If the API key is missing.
     */
    _apiKeyCheck() {
        if (!__classPrivateFieldGet(this, _User_apiKey, "f")) {
            throw new PassageError('A Passage API key is needed.');
        }
    }
    /**
     * Get a user's object using their user ID.
     *
     * @param {string} userID The Passage user ID
     * @return {Promise<UserInfo>} Passage User object
     */
    get(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const response = yield __classPrivateFieldGet(this, _User_client, "f").getUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return response.user;
            }
            catch (err) {
                throw new PassageError('Could not fetch user.', err);
            }
        });
    }
    /**
     * Deactivate a user using their user ID.
     *
     * @param {string} userID The Passage user ID
     * @return {Promise<UserInfo>} Passage User object
     */
    deactivate(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const response = yield __classPrivateFieldGet(this, _User_client, "f").deactivateUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return response.user;
            }
            catch (err) {
                throw new PassageError('Could not deactivate user.', err);
            }
        });
    }
    /**
     * Update a user.
     *
     * @param {string} userID The passage user ID
     * @param {UpdateUserPayload} payload The user attributes to be updated
     * @return {Promise<UserInfo>} Pasasge User Object
     */
    update(userID, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const response = yield __classPrivateFieldGet(this, _User_client, "f").updateUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    updateUserRequest: payload,
                    userId: userID,
                });
                return response.user;
            }
            catch (err) {
                throw new PassageError('Could not update user.', err);
            }
        });
    }
    /**
     * Activate a user using their user ID.
     *
     * @param {string} userID The passage user ID
     * @return {Promise<UserInfo>} Passage User object
     */
    activate(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const response = yield __classPrivateFieldGet(this, _User_client, "f").activateUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return response.user;
            }
            catch (err) {
                throw new PassageError('Could not activate user', err);
            }
        });
    }
    /**
     * Create a user.
     *
     * @param {CreateUserRequest} payload To create the user.
     * @return {Promise<UserInfo>} Passage User object
     */
    create(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const response = yield __classPrivateFieldGet(this, _User_client, "f").createUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    createUserRequest: payload,
                });
                return response.user;
            }
            catch (err) {
                throw new PassageError('Could not create user', err);
            }
        });
    }
    /**
     * Delete a user using their user ID.
     *
     * @param {string} userID The userID used to delete the corresponding user.
     * Either an E164 phone number or email address.
     * @return {boolean} True if user was deleted, false if not
     */
    delete(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                yield __classPrivateFieldGet(this, _User_client, "f").deleteUser({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return true;
            }
            catch (err) {
                throw new PassageError('Could not delete user.', err);
            }
        });
    }
    /**
     * Get a user's devices using their user ID.
     *
     * @param {string} userID The Passage user ID
     * @return {Promise<Array<WebAuthnDevices>>} List of devices
     */
    listDevices(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const client = new UserDevicesApi(__classPrivateFieldGet(this, _User_configuration, "f"));
                const response = yield client.listUserDevices({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return response.devices;
            }
            catch (err) {
                throw new PassageError("Could not fetch user's devices.", err);
            }
        });
    }
    /**
     * Revoke a user's device using their user ID and the device ID.
     *
     * @param {string} userID The Passage user ID
     * @param {string} deviceID The Passage user's device ID
     * @return {Promise<boolean>}
     */
    revokeDevice(userID, deviceID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const client = new UserDevicesApi(__classPrivateFieldGet(this, _User_configuration, "f"));
                yield client.deleteUserDevices({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    deviceId: deviceID,
                    userId: userID,
                });
                return true;
            }
            catch (err) {
                throw new PassageError("Could not delete user's device", err);
            }
        });
    }
    /**
     * Revokes all of a user's Refresh Tokens using their User ID.
     *
     * @param {string} userID The Passage user ID
     * @return {Promise<boolean>}
     */
    signOut(userID) {
        return __awaiter(this, void 0, void 0, function* () {
            this._apiKeyCheck();
            try {
                const client = new TokensApi(__classPrivateFieldGet(this, _User_configuration, "f"));
                yield client.revokeUserRefreshTokens({
                    appId: __classPrivateFieldGet(this, _User_appID, "f"),
                    userId: userID,
                });
                return true;
            }
            catch (err) {
                throw new PassageError("Could not revoke user's refresh tokens.", err);
            }
        });
    }
}
_User_appID = new WeakMap(), _User_apiKey = new WeakMap(), _User_client = new WeakMap(), _User_configuration = new WeakMap();
