import { Request } from 'express-serve-static-core';
import { createRemoteJWKSet } from 'jose';
import { AuthStrategy } from '../types/AuthStrategy';
import { PassageConfig } from '../types/PassageConfig';
import User from './User';
import { AppInfo, CreateMagicLinkRequest, MagicLink } from '../generated';
/**
 * Passage Class
 */
export default class Passage {
    #private;
    appID: string;
    authStrategy: AuthStrategy;
    user: User;
    jwks: ReturnType<typeof createRemoteJWKSet>;
    /**
     * Initialize a new Passage instance.
     * @param {PassageConfig} config The default config for Passage initialization
     */
    constructor(config?: PassageConfig);
    /**
     * Authenticate request with a cookie, or header. If no authentication
     * strategy is given, authenticate the request via cookie (default
     * authentication strategy).
     *
     * @param {Request} req Express request
     * @return {string} UserID of the Passage user
     */
    authenticateRequest(req: Request): Promise<string>;
    /**
     * Set API key for this Passage instance
     * @param {string} _apiKey
     */
    set apiKey(_apiKey: string | undefined);
    /**
     * Get API key for this Passage instance
     * @return {string | undefined} Passage API Key
     */
    get apiKey(): string | undefined;
    /**
     * Authenticate a request via the http header.
     *
     * @param {Request} req Express request
     * @return {string} User ID for Passage User
     */
    authenticateRequestWithHeader(req: Request): Promise<string>;
    /**
     * Authenticate request via cookie.
     *
     * @param {Request} req Express request
     * @return {string} UserID for Passage User
     */
    authenticateRequestWithCookie(req: Request): Promise<string>;
    /**
     * Determine if the provided token is valid when compared with its
     * respective public key.
     *
     * @param {string} token Authentication token
     * @return {string} sub claim if the jwt can be verified, or Error
     */
    validAuthToken(token: string): Promise<string | undefined>;
    /**
     * Create a Magic Link for your app.
     *
     * @param {MagicLinkRequest} magicLinkReq options for creating a MagicLink.
     * @return {Promise<MagicLink>} Passage MagicLink object
     */
    createMagicLink(magicLinkReq: CreateMagicLinkRequest): Promise<MagicLink>;
    /**
     * Get App Info about an app
     *
     * @return {Promise<AppInfo>} Passage App object
     */
    getApp(): Promise<AppInfo>;
}
